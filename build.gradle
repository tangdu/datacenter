
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springboot_version}"
    }
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
    }
}


subprojects{
    apply plugin: "java"
    apply plugin: 'org.springframework.boot'
    apply plugin: "org.sonarqube"

    group 'cn.xnh'
    version '1.0.0'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        maven { url "${XNH_MAVEN_REPOURL}" }
        maven { url "${ALY_MAVEN_REPOURL}" }
    }

    ext{
        generate_package=""
        model_prefix=""
    }

    configurations {
        mybatisGenerator
        compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
        compile.exclude group: "log4j"
    }

    dependencies {
        testCompile("org.springframework.boot:spring-boot-starter-test")
        compile(
                "org.springframework.boot:spring-boot-starter-undertow",
                "org.springframework.boot:spring-boot-starter",
                "org.projectlombok:lombok:${lombok_version}",
                "com.google.guava:guava:${guava_version}",
                "com.alibaba:fastjson:${fastjson_version}",
                "com.esotericsoftware:kryo:4.0.1",
                "de.javakaffee:kryo-serializers:0.41",
                "junit:junit:${junit_version}",
        )
        compile(
                "cn.luban:luban-commons:${luban_commons_version}",
                "cn.luban:luban-plugin:${luban_plugin_version}",
        )
        mybatisGenerator "org.mybatis.generator:mybatis-generator-maven-plugin:${mybatis_generator_version}"
        mybatisGenerator "cn.tdu.generator:mybatis-generator-core:${mybatis_generator_version}"
        mybatisGenerator "mysql:mysql-connector-java"
    }

    def relationPath="${projectDir.parent}/datacenter-deploy";
    def getDbProperties = {
        def properties = new Properties()
        file("${relationPath}/src/main/resources/application.properties").withInputStream { inputStream ->
            properties.load(inputStream)
        }
        properties
    }

    task mybatisGenerate  {
        doLast {
            def properties = getDbProperties()
            ant.properties['targetProject'] = projectDir.path
            ant.properties['driverClass'] = 'com.mysql.jdbc.Driver'
            ant.properties['connectionURL'] = properties.getProperty("spring.datasource.url")
            ant.properties['userId'] = properties.getProperty("spring.datasource.username")
            ant.properties['password'] = properties.getProperty("spring.datasource.password")
            ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
            ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
            //ant.properties['src_main_java'] = "${projectDir}/src/main/java".toString()
            //ant.properties['src_main_resources'] = "${projectDir}/src/main/resources".toString()

            def generate_package_dir="${generate_package}"
            if(generate_package_dir==''){
                println "#######default_src未设置"
                return ;
            }
            def modelPackage="${generate_package_dir}.model";
            if("${model_prefix}"!=''){
                modelPackage="${generate_package_dir}.model.${model_prefix}"
            }
            println """
                    通用层代码生成工具@tdu
                    Java路径:【${ant.properties['src_main_java']}】
                         此包目录为:【${generate_package_dir}】
                         模型目录为:【${modelPackage}】
                    XML 路径:【${ ant.properties['src_main_resources']}】
                    """
            ant.properties['modelPackage'] ="${modelPackage}".toString()
            ant.properties['mapperPackage'] ="${generate_package_dir}.mapper".toString()
            ant.properties['sqlMapperPackage'] = 'mybatis.user'.toString()
            ant.properties['servicePackage'] = "${generate_package_dir}.service".toString()
            ant.properties['serviceImplPackage'] = "${generate_package_dir}.service.impl".toString()
            ant.properties['facadePackage'] = "${generate_package_dir}.facade.service".toString()
            ant.properties['facadeImplPackage'] = "${generate_package_dir}.facade.impl".toString()
            ant.properties['stateCodePackage'] = "${generate_package_dir}.facade.statecode".toString()
            ant.properties['facadeRoPackage'] = "${generate_package_dir}.facade.ro".toString()
            ant.taskdef(
                    name: 'mbgenerator',
                    classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                    classpath: configurations.mybatisGenerator.asPath
            )
            ant.mbgenerator(overwrite: false,
                    configfile: "${ant.properties['src_main_resources']}/generatorConfig.xml", verbose: true) {
                propertyset {
                    propertyref(name: 'targetProject')
                    propertyref(name: 'userId')
                    propertyref(name: 'driverClass')
                    propertyref(name: 'connectionURL')
                    propertyref(name: 'password')
                    propertyref(name: 'src_main_java')
                    propertyref(name: 'src_main_resources')
                    propertyref(name: 'modelPackage')
                    propertyref(name: 'mapperPackage')
                    propertyref(name: 'sqlMapperPackage')
                    propertyref(name: 'servicePackage')
                    propertyref(name: 'serviceImplPackage')
                    propertyref(name: 'facadePackage')
                    propertyref(name: 'facadeImplPackage')
                    propertyref(name: 'facadeRoPackage')
                    propertyref(name: 'stateCodePackage')
                }
            }
        }
    }

    sonarqube{
        properties{
            property "sonar.host.url", "http://sonar.server.com:9000/"
            property "sonar.jdbc.url", "jdbc:mysql://sonar.mysql.com:3306/sonar?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true"
            property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
            property "sonar.jdbc.username", "sonar"
            property "sonar.jdbc.password", "#sonaR023"
        }
    }

    task sourceJar (type : Jar) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar (type: Jar, dependsOn: javadoc) {
        classifier = "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives sourceJar
    }
}